/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainserver;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

import authserver.AUTH_TCPClientThread;
import pop3server.POP3_TCPClientThread;
import smtpserver.SMTP_TCPClientThread;

/**
 *
 * @author DungVan
 */
public class MainServer_GUI extends JFrame {

	private ServerSocket server_smtp, server_pop3, server_auth;
	Thread smtpTcpMainThread, pop3TcpMainThread, authTcpMainThread;

	/**
	 * Creates new form MainServer
	 */
	public MainServer_GUI() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new JScrollPane();
		ta_showconnection = new JTextArea();
		jScrollPane2 = new JScrollPane();
		ta_showpop3communication = new JTextArea();
		jScrollPane3 = new JScrollPane();
		ta_showsmtpcomunication = new JTextArea();
		bt_start = new JButton();
		bt_stop = new JButton();
		tf_smtpport = new JTextField("25");
		tf_pop3port = new JTextField("110");
		tf_authport = new JTextField("3001");
		lb_smtpport = new JLabel();
		lb_pop3port = new JLabel();
		lb_authport = new JLabel();
		bt_exit = new JButton();

		setDefaultCloseOperation(EXIT_ON_CLOSE);
		getContentPane().setLayout(new AbsoluteLayout());

		ta_showconnection.setEditable(false);
		ta_showconnection.setFont(new Font("Tahoma", 1, 10));
		jScrollPane1.setViewportView(ta_showconnection);
		getContentPane().add(jScrollPane1,
				new AbsoluteConstraints(0, 176, 288, 180));

		ta_showpop3communication.setEditable(false);
		ta_showpop3communication.setFont(new Font("Tahoma", 1, 10));
		jScrollPane2.setViewportView(ta_showpop3communication);
		getContentPane().add(jScrollPane2,
				new AbsoluteConstraints(290, 176, 273, 180));

		ta_showsmtpcomunication.setEditable(false);
		ta_showsmtpcomunication.setFont(new Font("Tahoma", 1, 10));
		jScrollPane3.setViewportView(ta_showsmtpcomunication);

		getContentPane().add(jScrollPane3,
				new AbsoluteConstraints(290, 2, 273, 170));

		bt_start.setText("<html><b>START</b></html>");
		bt_start.setFont(new Font("Tahoma", 0, 10));
		bt_start.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				bt_startActionPerformed(evt);
			}
		});
		getContentPane().add(bt_start,
				new AbsoluteConstraints(20, 120, 70, -1));

		bt_stop.setText("<html><b>STOP</html></b>");
		bt_stop.setFont(new Font("Tahoma", 0, 10));
		bt_stop.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				bt_stopActionPerformed(evt);
			}
		});
		getContentPane().add(bt_stop,
				new AbsoluteConstraints(110, 120, 70, -1));
		tf_smtpport.setHorizontalAlignment(JTextField.RIGHT);
		getContentPane().add(tf_smtpport,
				new AbsoluteConstraints(150, 20, 72, -1));
		tf_pop3port.setHorizontalAlignment(JTextField.RIGHT);
		getContentPane().add(tf_pop3port,
				new AbsoluteConstraints(150, 50, 72, -1));
		tf_authport.setHorizontalAlignment(JTextField.RIGHT);
		getContentPane().add(tf_authport,
				new AbsoluteConstraints(150, 80, 72, -1));

		lb_smtpport.setText("SMTP PORT : ");
		getContentPane().add(lb_smtpport,
				new AbsoluteConstraints(40, 20, -1, -1));

		lb_pop3port.setText("POP3 PORT : ");
		getContentPane().add(lb_pop3port,
				new AbsoluteConstraints(40, 50, -1, -1));

		lb_authport.setText("AUTH PORT : ");
		getContentPane().add(lb_authport,
				new AbsoluteConstraints(40, 80, -1, -1));

		bt_exit.setText("<html><b>EXIT</b></html>");
		bt_exit.setFont(new Font("Tahoma", 0, 10));
		bt_exit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				bt_exitActionPerformed(evt);
			}
		});
		getContentPane().add(bt_exit,
				new AbsoluteConstraints(200, 120, 70, -1));

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>

	private void bt_stopActionPerformed(ActionEvent evt) {
		// TODO add your handling code here:
		if (this.smtpTcpMainThread.isAlive()) {
			stopServer();
			JOptionPane.showMessageDialog(this, "Server closed!");
		}
	}

	private void bt_startActionPerformed(ActionEvent evt) {
		// TODO add your handling code here:
		try {
			int smtpPort = Integer.parseInt(this.tf_smtpport.getText());
			int pop3Port = Integer.parseInt(this.tf_pop3port.getText());
			int authPort = Integer.parseInt(this.tf_authport.getText());
			startServer(smtpPort, pop3Port, authPort);

			JOptionPane.showMessageDialog(this, "Server started!");
		} catch (NumberFormatException nfe) {
			JOptionPane.showMessageDialog(this, "Wrong port to start server!");
			java.util.logging.Logger.getLogger(MainServer_GUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, nfe);
		}
	}

	private void bt_exitActionPerformed(ActionEvent evt) {
		// TODO add your handling code here
		stopServer();
		System.exit(0);
	}

	public static void append(JTextArea ta, String text) {
		ta.append(text);
	}

	/*
	 * Main code process
	 */

	private List<Thread> smtpTcpClients = new ArrayList<>();
	private List<Thread> pop3TcpClients = new ArrayList<>();
	private List<Thread> authTcpClients = new ArrayList<>();

	public void startServer(int smtpTcpPort, int pop3TcpPort, int authTcpPort) {
		smtpTcpMainThread = new Thread() {

			@Override
			public void run() {
				try {
					server_smtp = new ServerSocket(smtpTcpPort);
					System.out.println(
							"Listening on smtp TCP port " + smtpTcpPort);
					while (true) {
						Socket client = server_smtp.accept();
						SMTP_TCPClientThread th = new SMTP_TCPClientThread(
								client);
						smtpTcpClients.add(th);
						th.start();
					}
				} catch (IOException ex) {
					Logger.getLogger(MainServer_GUI.class.getName())
							.log(Level.SEVERE, null, ex);
				}
			}
		};
		smtpTcpMainThread.start();

		pop3TcpMainThread = new Thread() {

			@Override
			public void run() {
				try {
					server_pop3 = new ServerSocket(pop3TcpPort);
					System.out.println(
							"Listening on pop3 TCP port " + pop3TcpPort);
					while (true) {
						Socket client = server_pop3.accept();
						POP3_TCPClientThread th = new POP3_TCPClientThread(
								client);
						pop3TcpClients.add(th);
						th.start();
					}
				} catch (IOException ex) {
					Logger.getLogger(MainServer_GUI.class.getName())
							.log(Level.SEVERE, null, ex);
				}
			}
		};
		pop3TcpMainThread.start();

		authTcpMainThread = new Thread() {

			@Override
			public void run() {
				try {
					server_auth = new ServerSocket(authTcpPort);
					System.out.println("Listening on authentication TCP port "
							+ authTcpPort);
					while (true) {
						Socket client = server_auth.accept();
						AUTH_TCPClientThread th = new AUTH_TCPClientThread(
								client);
						authTcpClients.add(th);
						th.start();
					}
				} catch (IOException ex) {
					Logger.getLogger(MainServer_GUI.class.getName())
							.log(Level.SEVERE, null, ex);
				}

			}

		};
		authTcpMainThread.start();
	}

	public void stopServer() {
		if (smtpTcpMainThread.isAlive()) {
			if (!server_smtp.isClosed()) {
				try {
					server_smtp.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			smtpTcpMainThread.stop();
		}
		if (pop3TcpMainThread.isAlive()){
			if (!server_pop3.isClosed()) {
				try {
					server_pop3.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			pop3TcpMainThread.stop();
		}
		if (authTcpMainThread.isAlive()){
			if (!server_auth.isClosed()) {
				try {
					server_auth.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			authTcpMainThread.stop();
		}
	}
	/*
	 * End main code process
	 */

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainServer_GUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private JButton bt_exit;
	private JButton bt_start;
	private JButton bt_stop;
	private JScrollPane jScrollPane1;
	private JScrollPane jScrollPane2;
	private JScrollPane jScrollPane3;
	private JLabel lb_authport;
	private JLabel lb_pop3port;
	private JLabel lb_smtpport;
	public static JTextArea ta_showconnection;
	public static JTextArea ta_showpop3communication;
	public static JTextArea ta_showsmtpcomunication;
	private JTextField tf_authport;
	private JTextField tf_pop3port;
	private JTextField tf_smtpport;
	// End of variables declaration
}
